[
  {
    "objectID": "CODE_OF_CONDUCT.html",
    "href": "CODE_OF_CONDUCT.html",
    "title": "ml_project_template",
    "section": "",
    "text": "We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n\n\nExamples of behavior that contributes to a positive environment for our community include:\n\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\n\n\n\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at nuutti.sten@hel.fi. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n\n\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n\n\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n\n\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\n\n\n\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/idna-3.3.dist-info/LICENSE.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/idna-3.3.dist-info/LICENSE.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Copyright (c) 2013-2021, Kim Davies All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbformat-5.4.0.dist-info/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbformat-5.4.0.dist-info/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/soupsieve-2.3.2.post1.dist-info/license_files/LICENSE.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/soupsieve-2.3.2.post1.dist-info/license_files/LICENSE.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Copyright (c) 2018 - 2022 Isaac Muse isaacmuse@gmail.com\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/QtPy-2.2.0.dist-info/AUTHORS.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/QtPy-2.2.0.dist-info/AUTHORS.html",
    "title": "ml_project_template",
    "section": "",
    "text": "pyqode.qt: Colin Duquesnoy (@ColinDuquesnoy)\nspyderlib.qt: Pierre Raybaut (@PierreRaybaut)\nqt-helpers: Thomas Robitaille (@astrofrog)\n\n\n\n\n\nDaniel Althviz (@dalthviz)\nCarlos Cordoba (@ccordoba12)\nC.A.M. Gerlach (@CAM-Gerlach)\nSpyder Development Team (Spyder-IDE)\n\n\n\n\n\nThe QtPy Contributors"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_core-4.11.1.dist-info/license_files/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_core-4.11.1.dist-info/license_files/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Jupyter is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects. A full list with details is kept in the documentation directory, in the file about/credits.txt.\nThe core team that coordinates development on GitHub can be found here: https://github.com/ipython/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. It is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/ipykernel-6.15.2.dist-info/licenses/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/ipykernel-6.15.2.dist-info/licenses/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2015, IPython Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the IPython Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe IPython Development Team is the set of all contributors to the IPython project. This includes all of the IPython subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/ipython/.\n\n\n\nIPython uses a shared copyright model. Each contributor maintains copyright over their contributions to IPython. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the IPython source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire IPython Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the IPython repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/UnicodePy3.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/UnicodePy3.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print('☃')\n\n☃"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/JupyterWidgets.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/JupyterWidgets.html",
    "title": "ml_project_template",
    "section": "",
    "text": "# it should also handle custom msg'es\nlabel.send({'msg': 'Hello'})"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Other Comms.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Other Comms.html",
    "title": "ml_project_template",
    "section": "",
    "text": "comm = Comm('this-comm-tests-a-missing-handler', data={'id': 'foo'})\n\n\ncomm.send(data={'id': 'bar'})"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/SVG.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/SVG.html",
    "title": "ml_project_template",
    "section": "",
    "text": "SVG(data='''\n<svg height=\"100\" width=\"100\">\n    <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"2\" fill=\"red\" />\n</svg>''')"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Disable Stdin.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Disable Stdin.html",
    "title": "ml_project_template",
    "section": "",
    "text": "try:\n    input = raw_input\nexcept:\n    pass\n\nname = input(\"name: \")"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Autokill.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Autokill.html",
    "title": "ml_project_template",
    "section": "",
    "text": "import os\nimport signal\npid = os.getpid()\nos.kill(pid, signal.SIGTERM)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/update-display-id.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/update-display-id.html",
    "title": "ml_project_template",
    "section": "",
    "text": "display('above')\ndisplay_with_id(1, 'here')\ndisplay('below')\n\n'above'\n\n\n8\n\n\n'below'\n\n\n\ndisplay_with_id(2, 'here')\ndisplay_with_id(3, 'there')\ndisplay_with_id(4, 'here')\n\n8\n\n\n6\n\n\n8\n\n\n\ndisplay_with_id(5, 'there')\ndisplay_with_id(6, 'there', update=True)\n\n6\n\n\n\ndisplay_with_id(7, 'here')\ndisplay_with_id(8, 'here', update=True)\ndisplay_with_id(9, 'result', execute_result=True)\n\n8\n\n\n10\n\n\n\ndisplay_with_id(10, 'result', update=True)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Inline Image.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Inline Image.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Image('python.png')"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Interrupt.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Interrupt.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print(\"done\")\n\ndone"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Factorials.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Factorials.html",
    "title": "ml_project_template",
    "section": "",
    "text": "for m in range(10):\n    i, j = j, i + j\n    print(j)\n\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Exceptions with Cell Tags.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print('ok')\n\nok"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Check History in Memory.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Check History in Memory.html",
    "title": "ml_project_template",
    "section": "",
    "text": "ip = get_ipython()\nassert ip.history_manager.hist_file == ':memory:'"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Output.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Output.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print(\"hi\")\nwith output1:\n    print(\"in output\")\n\nhi\n\n\n\nwith output1:\n    raise ValueError(\"trigger msg_type=error\")\n\n\nimport ipywidgets as widgets\noutput2 = widgets.Output()\noutput2\n\n\n\n\n\nprint(\"hi2\")\nwith output2:\n    print(\"in output2\")\n    clear_output(wait=True)\n\nhi2\n\n\n\nimport ipywidgets as widgets\noutput3 = widgets.Output()\noutput3\n\n\n\n\n\nprint(\"hi3\")\nwith output3:\n    print(\"hello\")\n    clear_output(wait=True)\n    print(\"world\")\n\nhi3\n\n\n\nimport ipywidgets as widgets\noutput4 = widgets.Output()\noutput4\n\n\n\n\n\nprint(\"hi4\")\nwith output4:\n    print(\"hello world\")\n    clear_output()\n\nhi4\n\n\n\nimport ipywidgets as widgets\noutput5 = widgets.Output()\noutput5\n\n\n\n\n\nprint(\"hi5\")\nwith output5:\n    display(\"hello world\") # this is not a stream but plain text\nclear_output()\n\n\nimport ipywidgets as widgets\noutput_outer = widgets.Output()\noutput_inner = widgets.Output()\noutput_inner\n\n\n\n\n\noutput_outer\n\n\n\n\n\nwith output_inner:\n    print('in inner')\n    with output_outer:\n        print('in outer')\n    print('also in inner')"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Clear Output.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Clear Output.html",
    "title": "ml_project_template",
    "section": "",
    "text": "for i in range(10):\n    clear_output()\n    print(i)\n\n9\n\n\n\nprint(\"Hello world\")\nclear_output()\n\n\nprint(\"Hello world\", end='')\nclear_output(wait=True)  # no output after this\n\nHello world\n\n\n\nprint(\"Hello\", end='')\nclear_output(wait=True)  # here we have new output after wait=True\nprint(\"world\", end='')\n\nworld\n\n\n\nhandle0 = display(\"Hello world\", display_id=\"id0\")\n\n'Hello world'\n\n\n\nhandle1 = display(\"Hello\", display_id=\"id1\")\n\n'world'\n\n\n\nhandle1.update('world')\n\n\nhandle2 = display(\"Hello world\", display_id=\"id2\")\nclear_output()  # clears all output, also with display_ids\n\n\nhandle3 = display(\"Hello world\", display_id=\"id3\")\nclear_output(wait=True)\n\n'Hello world'\n\n\n\nhandle4 = display(\"Hello\", display_id=\"id4\")\nclear_output(wait=True)\nprint('world', end='')\n\nworld\n\n\n\nhandle4.update('Hello world')  # it is cleared, so it should not show up in the above cell"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Parallel Execute A.html",
    "title": "Ensure notebooks can execute in parallel",
    "section": "",
    "text": "# the variable this_notebook is injectected in a cell above by the test framework.\nthis_notebook = 'A'\nother_notebook = 'B'\ndirectory = os.environ['NBEXECUTE_TEST_PARALLEL_TMPDIR']\nwith open(os.path.join(directory, 'test_file_{}.txt'.format(this_notebook)), 'w') as f:\n    f.write('Hello from {}'.format(this_notebook))\n\n\nstart = time.time()\ntimeout = 5\nend = start + timeout\ntarget_file = os.path.join(directory, 'test_file_{}.txt'.format(other_notebook))\nwhile time.time() < end:\n    time.sleep(0.1)\n    if os.path.exists(target_file):\n        with open(target_file, 'r') as f:\n            text = f.read()\n        if text == 'Hello from {}'.format(other_notebook):\n            break\nelse:\n    assert False, \"Timed out – didn't get a message from {}\".format(other_notebook)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Empty Cell.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Empty Cell.html",
    "title": "ml_project_template",
    "section": "",
    "text": "\"Code 1\"\n\n'Code 1'\n\n\n\n\"Code 2\"\n\n'Code 2'"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Execution with Cell Tag.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print('ok')\n\nok"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Parallel Execute B.html",
    "title": "Ensure notebooks can execute in parallel",
    "section": "",
    "text": "# the variable this_notebook is injectected in a cell above by the test framework.\nthis_notebook = 'B'\nother_notebook = 'A'\ndirectory = os.environ['NBEXECUTE_TEST_PARALLEL_TMPDIR']\nwith open(os.path.join(directory, 'test_file_{}.txt'.format(this_notebook)), 'w') as f:\n    f.write('Hello from {}'.format(this_notebook))\n\n\nstart = time.time()\ntimeout = 5\nend = start + timeout\ntarget_file = os.path.join(directory, 'test_file_{}.txt'.format(other_notebook))\nwhile time.time() < end:\n    time.sleep(0.1)\n    if os.path.exists(target_file):\n        with open(target_file, 'r') as f:\n            text = f.read()\n        if text == 'Hello from {}'.format(other_notebook):\n            break\nelse:\n    assert False, \"Timed out – didn't get a message from {}\".format(other_notebook)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Unicode.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Unicode.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print('☃')\n\n☃"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/HelloWorld.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/HelloWorld.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print(\"Hello World\")\n\nHello World"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Sleep1s.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Sleep1s.html",
    "title": "ml_project_template",
    "section": "",
    "text": "t0 = datetime.datetime.utcnow()\ntime.sleep(1)\nt1 = datetime.datetime.utcnow()\n\n\ntime_format = '%Y-%m-%dT%H:%M:%S.%fZ'\nprint(t0.strftime(time_format), end='')\n\n\nprint(t1.strftime(time_format), end='')"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Error.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Error.html",
    "title": "ml_project_template",
    "section": "",
    "text": "0/0\n\nZeroDivisionError: division by zero"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/nbclient/tests/files/Skip Exceptions.html",
    "title": "ml_project_template",
    "section": "",
    "text": "print('ok')\n\nok"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/traitlets-5.3.0.dist-info/license_files/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/traitlets-5.3.0.dist-info/license_files/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Traitlets is adapted from enthought.traits, Copyright (c) Enthought, Inc., under the terms of the Modified BSD License.\nThis project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-, IPython Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the IPython Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe IPython Development Team is the set of all contributors to the IPython project. This includes all of the IPython subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nIPython uses a shared copyright model. Each contributor maintains copyright over their contributions to IPython. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the IPython source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire IPython Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the IPython repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html",
    "title": "ml_project_template",
    "section": "",
    "text": "from imp import reload"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-for-nbagg-backend.",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-for-nbagg-backend.",
    "title": "ml_project_template",
    "section": "UAT for NbAgg backend.",
    "text": "UAT for NbAgg backend.\nThe first line simply reloads matplotlib, uses the nbagg backend and then reloads the backend, just to ensure we have the latest modification to the backend code. Note: The underlying JavaScript will not be updated by this process, so a refresh of the browser after clearing the output and saving is necessary to clear everything fully.\n\nimport matplotlib\nreload(matplotlib)\n\nmatplotlib.use('nbagg')\n\nimport matplotlib.backends.backend_nbagg\nreload(matplotlib.backends.backend_nbagg)\n\n\nUAT 1 - Simple figure creation using pyplot\nShould produce a figure window which is interactive with the pan and zoom buttons. (Do not press the close button, but any others may be used).\n\nimport matplotlib.backends.backend_webagg_core\nreload(matplotlib.backends.backend_webagg_core)\n\nimport matplotlib.pyplot as plt\nplt.interactive(False)\n\nfig1 = plt.figure()\nplt.plot(range(10))\n\nplt.show()\n\n\n\nUAT 2 - Creation of another figure, without the need to do plt.figure.\nAs above, a new figure should be created.\n\nplt.plot([3, 2, 1])\nplt.show()\n\n\n\nUAT 3 - Connection info\nThe printout should show that there are two figures which have active CommSockets, and no figures pending show.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\n\n\nUAT 4 - Closing figures\nClosing a specific figure instance should turn the figure into a plain image - the UI should have been removed. In this case, scroll back to the first figure and assert this is the case.\n\nplt.close(fig1)\nplt.close('all')\n\n\n\nUAT 5 - No show without plt.show in non-interactive mode\nSimply doing a plt.plot should not show a new figure, nor indeed update an existing one (easily verified in UAT 6). The output should simply be a list of Line2D instances.\n\nplt.plot(range(10))\n\n\n\nUAT 6 - Connection information\nWe just created a new figure, but didn’t show it. Connection info should no longer have “Figure 1” (as we closed it in UAT 4) and should have figure 2 and 3, with Figure 3 without any connections. There should be 1 figure pending.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\n\n\nUAT 7 - Show of previously created figure\nWe should be able to show a figure we’ve previously created. The following should produce two figure windows.\n\nplt.show()\nplt.figure()\nplt.plot(range(5))\nplt.show()\n\n\n\nUAT 8 - Interactive mode\nIn interactive mode, creating a line should result in a figure being shown.\n\nplt.interactive(True)\nplt.figure()\nplt.plot([3, 2, 1])\n\nSubsequent lines should be added to the existing figure, rather than creating a new one.\n\nplt.plot(range(3))\n\nCalling connection_info in interactive mode should not show any pending figures.\n\nprint(matplotlib.backends.backend_nbagg.connection_info())\n\nDisable interactive mode again.\n\nplt.interactive(False)\n\n\n\nUAT 9 - Multiple shows\nUnlike most of the other matplotlib backends, we may want to see a figure multiple times (with or without synchronisation between the views, though the former is not yet implemented). Assert that plt.gcf().canvas.manager.reshow() results in another figure window which is synchronised upon pan & zoom.\n\nplt.gcf().canvas.manager.reshow()\n\n\n\nUAT 10 - Saving notebook\nSaving the notebook (with CTRL+S or File->Save) should result in the saved notebook having static versions of the figues embedded within. The image should be the last update from user interaction and interactive plotting. (check by converting with ipython nbconvert <notebook>)\n\n\nUAT 11 - Creation of a new figure on second show\nCreate a figure, show it, then create a new axes and show it. The result should be a new figure.\nBUG: Sometimes this doesn’t work - not sure why (@pelson).\n\nfig = plt.figure()\nplt.axes()\nplt.show()\n\nplt.plot([1, 2, 3])\nplt.show()\n\n\n\nUAT 12 - OO interface\nShould produce a new figure and plot it.\n\nfrom matplotlib.backends.backend_nbagg import new_figure_manager,show\n\nmanager = new_figure_manager(1000)\nfig = manager.canvas.figure\nax = fig.add_subplot(1,1,1)\nax.plot([1,2,3])\nfig.show()"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/matplotlib/backends/web_backend/nbagg_uat.html#uat-13---animation",
    "title": "ml_project_template",
    "section": "UAT 13 - Animation",
    "text": "UAT 13 - Animation\nThe following should generate an animated line:\n\nimport matplotlib.animation as animation\nimport numpy as np\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2*np.pi, 0.01)        # x-array\nline, = ax.plot(x, np.sin(x))\n\ndef animate(i):\n    line.set_ydata(np.sin(x+i/10.0))  # update the data\n    return line,\n\n#Init only required for blitting to give a clean slate.\ndef init():\n    line.set_ydata(np.ma.array(x, mask=True))\n    return line,\n\nani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,\n                              interval=100., blit=True)\nplt.show()\n\n\nUAT 14 - Keyboard shortcuts in IPython after close of figure\nAfter closing the previous figure (with the close button above the figure) the IPython keyboard shortcuts should still function.\n\n\nUAT 15 - Figure face colours\nThe nbagg honours all colours apart from that of the figure.patch. The two plots below should produce a figure with a red background. There should be no yellow figure.\n\nimport matplotlib\nmatplotlib.rcParams.update({'figure.facecolor': 'red',\n                            'savefig.facecolor': 'yellow'})\nplt.figure()\nplt.plot([3, 2, 1])\n\nplt.show()\n\n\n\nUAT 16 - Events\nPressing any keyboard key or mouse button (or scrolling) should cycle the line line while the figure has focus. The figure should have focus by default when it is created and re-gain it by clicking on the canvas. Clicking anywhere outside of the figure should release focus, but moving the mouse out of the figure should not release focus.\n\nimport itertools\nfig, ax = plt.subplots()\nx = np.linspace(0,10,10000)\ny = np.sin(x)\nln, = ax.plot(x,y)\nevt = []\ncolors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))\ndef on_event(event):\n    if event.name.startswith('key'):\n        fig.suptitle('%s: %s' % (event.name, event.key))\n    elif event.name == 'scroll_event':\n        fig.suptitle('%s: %s' % (event.name, event.step))\n    else:\n        fig.suptitle('%s: %s' % (event.name, event.button))\n    evt.append(event)\n    ln.set_color(next(colors))\n    fig.canvas.draw()\n    fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect('button_press_event', on_event)\nfig.canvas.mpl_connect('button_release_event', on_event)\nfig.canvas.mpl_connect('scroll_event', on_event)\nfig.canvas.mpl_connect('key_press_event', on_event)\nfig.canvas.mpl_connect('key_release_event', on_event)\n\nplt.show()\n\n\n\nUAT 17 - Timers\nSingle-shot timers follow a completely different code path in the nbagg backend than regular timers (such as those used in the animation example above.) The next set of tests ensures that both “regular” and “single-shot” timers work properly.\nThe following should show a simple clock that updates twice a second:\n\nimport time\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\n\ndef update(text):\n    text.set(text=time.ctime())\n    text.axes.figure.canvas.draw()\n    \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\ntimer.start()\nplt.show()\n\nHowever, the following should only update once and then stop:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center') \ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\n\nplt.show()\n\nAnd the next two examples should never show any visible text at all:\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\nfig, ax = plt.subplots()\ntext = ax.text(0.5, 0.5, '', ha='center')\ntimer = fig.canvas.new_timer(500, [(update, [text], {})])\n\ntimer.single_shot = True\ntimer.start()\ntimer.stop()\n\nplt.show()\n\n\n\nUAT 18 - stopping figure when removed from DOM\nWhen the div that contains from the figure is removed from the DOM the figure should shut down it’s comm, and if the python-side figure has no more active comms, it should destroy the figure. Repeatedly running the cell below should always have the same figure number\n\nfig, ax = plt.subplots()\nax.plot(range(5))\nplt.show()\n\nRunning the cell below will re-show the figure. After this, re-running the cell above should result in a new figure number.\n\nfig.canvas.manager.reshow()\n\n\n\nUAT 19 - Blitting\nClicking on the figure should plot a green horizontal line moving up the axes.\n\nimport itertools\n\ncnt = itertools.count()\nbg = None\n\ndef onclick_handle(event):\n    \"\"\"Should draw elevating green line on each mouse click\"\"\"\n    global bg\n    if bg is None:\n        bg = ax.figure.canvas.copy_from_bbox(ax.bbox) \n    ax.figure.canvas.restore_region(bg)\n\n    cur_y = (next(cnt) % 10) * 0.1\n    ln.set_ydata([cur_y, cur_y])\n    ax.draw_artist(ln)\n    ax.figure.canvas.blit(ax.bbox)\n\nfig, ax = plt.subplots()\nax.plot([0, 1], [0, 1], 'r')\nln, = ax.plot([0, 1], [0, 0], 'g', animated=True)\nplt.show()\nax.figure.canvas.draw()\n\nax.figure.canvas.mpl_connect('button_press_event', onclick_handle)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/pyzmq-23.2.1.dist-info/AUTHORS.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/pyzmq-23.2.1.dist-info/AUTHORS.html",
    "title": "ml_project_template",
    "section": "",
    "text": "This project was started and continues to be led by Brian E. Granger (ellisonbg AT gmail DOT com). Min Ragan-Kelley (benjaminrk AT gmail DOT com) is the primary developer of pyzmq at this time.\nThe following people have contributed to the project:\n\nAlexander Else (alexander DOT else AT team DOT telstra DOT com)\nAlexander Pyhalov (apyhalov AT gmail DOT com)\nAlexandr Emelin (frvzmb AT gmail DOT com)\nAmr Ali (amr AT ledgerx DOT com)\nAndre Caron (andre DOT l DOT caron AT gmail DOT com)\nAndrea Crotti (andrea DOT crotti DOT 0 AT gmail DOT com)\nAndrew Gwozdziewycz (git AT apgwoz DOT com)\nBaptiste Lepilleur (baptiste DOT lepilleur AT gmail DOT com)\nBrandyn A. White (bwhite AT dappervision DOT com)\nBrian E. Granger (ellisonbg AT gmail DOT com)\nBrian Hoffman (hoffman_brian AT bah DOT com)\nCarlos A. Rocha (carlos DOT rocha AT gmail DOT com)\nChris Laws (clawsicus AT gmail DOT com)\nChristian Wyglendowski (christian AT bu DOT mp)\nChristoph Gohlke (cgohlke AT uci DOT edu)\nCurtis (curtis AT tinbrain DOT net)\nCyril Holweck (cyril DOT holweck AT free DOT fr)\nDan Colish (dcolish AT gmail DOT com)\nDaniel Lundin (dln AT eintr DOT org)\nDaniel Truemper (truemped AT googlemail DOT com)\nDouglas Creager (douglas DOT creager AT redjack DOT com)\nEduardo Stalinho (eduardooc DOT 86 AT gmail DOT com)\nEren Güven (erenguven0 AT gmail DOT com)\nErick Tryzelaar (erick DOT tryzelaar AT gmail DOT com)\nErik Tollerud (erik DOT tollerud AT gmail DOT com)\nFELD Boris (lothiraldan AT gmail DOT com)\nFantix King (fantix DOT king AT gmail DOT com)\nFelipe Cruz (felipecruz AT loogica DOT net)\nFernando Perez (Fernando DOT Perez AT berkeley DOT edu)\nFrank Wiles (frank AT revsys DOT com)\nFélix-Antoine Fortin (felix DOT antoine DOT fortin AT gmail DOT com)\nGavrie Philipson (gavriep AT il DOT ibm DOT com)\nGodefroid Chapelle (gotcha AT bubblenet DOT be)\nGreg Banks (gbanks AT mybasis DOT com)\nGreg Ward (greg AT gerg DOT ca)\nGuido Goldstein (github AT a-nugget DOT de)\nIan Lee (IanLee1521 AT gmail DOT com)\nIonuț Arțăriși (ionut AT artarisi DOT eu)\nIvo Danihelka (ivo AT danihelka DOT net)\nIyed (iyed DOT bennour AT gmail DOT com)\nJim Garrison (jim AT garrison DOT cc)\nJohn Gallagher (johnkgallagher AT gmail DOT com)\nJulian Taylor (jtaylor DOT debian AT googlemail DOT com)\nJustin Bronder (jsbronder AT gmail DOT com)\nJustin Riley (justin DOT t DOT riley AT gmail DOT com)\nMarc Abramowitz (marc AT marc-abramowitz DOT com)\nMatthew Aburn (mattja6 AT gmail DOT com)\nMichel Pelletier (pelletier DOT michel AT gmail DOT com)\nMichel Zou (xantares09 AT hotmail DOT com)\nMin Ragan-Kelley (benjaminrk AT gmail DOT com)\nNell Hardcastle (nell AT dev-nell DOT com)\nNicholas Pilkington (nicholas DOT pilkington AT gmail DOT com)\nNicholas Piël (nicholas AT nichol DOT as)\nNick Pellegrino (npellegrino AT mozilla DOT com)\nNicolas Delaby (nicolas DOT delaby AT ezeep DOT com)\nOndrej Certik (ondrej AT certik DOT cz)\nPaul Colomiets (paul AT colomiets DOT name)\nPawel Jasinski (pawel DOT jasinski AT gmail DOT com)\nPhus Lu (phus DOT lu AT gmail DOT com)\nRobert Buchholz (rbu AT goodpoint DOT de)\nRobert Jordens (jordens AT gmail DOT com)\nRyan Cox (ryan DOT a DOT cox AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nScott Maxwell (scott AT codecobblers DOT com)\nScott Sadler (github AT mashi DOT org)\nSimon Knight (simon DOT knight AT gmail DOT com)\nStefan Friesel (sf AT cloudcontrol DOT de)\nStefan van der Walt (stefan AT sun DOT ac DOT za)\nStephen Diehl (stephen DOT m DOT diehl AT gmail DOT com)\nSylvain Corlay (scorlay AT bloomberg DOT net)\nThomas Kluyver (takowl AT gmail DOT com)\nThomas Spura (tomspur AT fedoraproject DOT org)\nTigger Bear (Tigger AT Tiggers-Mac-mini DOT local)\nTorsten Landschoff (torsten DOT landschoff AT dynamore DOT de)\nVadim Markovtsev (v DOT markovtsev AT samsung DOT com)\nYannick Hold (yannickhold AT gmail DOT com)\nZbigniew Jędrzejewski-Szmek (zbyszek AT in DOT waw DOT pl)\nhugo shi (hugoshi AT bleb2 DOT (none))\njdgleeson (jdgleeson AT mac DOT com)\nkyledj (kyle AT bucebuce DOT com)\nspez (steve AT hipmunk DOT com)\nstu (stuart DOT axon AT jpcreative DOT co DOT uk)\nxantares (xantares AT fujitsu-l64 DOT (none))\n\nas reported by:\ngit log --all --format='- %aN (%aE)' | sort -u | sed 's/@/ AT /1' | sed -e 's/\\.\\([^ ]\\)/ DOT \\1/g'\nwith some adjustments.\n\n\n\nBrandon Craig-Rhodes (brandon AT rhodesmill DOT org)\nEugene Chernyshov (chernyshov DOT eugene AT gmail DOT com)\nCraig Austin (craig DOT austin AT gmail DOT com)\n\n\n\n\n\nTravis Cline (travis DOT cline AT gmail DOT com)\nRyan Kelly (ryan AT rfk DOT id DOT au)\nZachary Voase (z AT zacharyvoase DOT com)"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/black-22.8.0.dist-info/AUTHORS.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/black-22.8.0.dist-info/AUTHORS.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Glued together by Łukasz Langa.\nMaintained with:\n\nCarol Willing\nCarl Meyer\nJelle Zijlstra\nMika Naylor\nZsolt Dollenstein\nCooper Lees\nRichard Si\nFelix Hildén\nBatuhan Taskaya\n\nMultiple contributions by:\n\nAbdur-Rahmaan Janhangeer\nAdam Johnson\nAdam Williamson\nAlexander Huynh\nAlexandr Artemyev\nAlex Vandiver\nAllan Simon\nAnders-Petter Ljungquist\nAndrew Thorp\nAndrew Zhou\nAndrey\nAndy Freeland\nAnthony Sottile\nArjaan Buijk\nArnav Borbornah\nArtem Malyshev\nAsger Hautop Drewsen\nAugie Fackler\nAviskar KC\nBatuhan Taşkaya\nBenjamin Wohlwend\nBenjamin Woodruff\nBharat Raghunathan\nBrandt Bucher\nBrett Cannon\nBryan Bugyi\nBryan Forbes\nCalum Lind\nCharles\nCharles Reid\nChristian Clauss\nChristian Heimes\nChuck Wooters\nChris Rose\nCodey Oxley\nCong\nCooper Ry Lees\nDan Davison\nDaniel Hahler\nDaniel M. Capella\nDaniele Esposti\nDavid Hotham\nDavid Lukes\nDavid Szotten\nDenis Laxalde\nDouglas Thor\ndylanjblack\nEli Treuherz\nEmil Hessman\nFelix Kohlgrüber\nFlorent Thiery\nFrancisco\nGiacomo Tagliabue\nGreg Gandenberger\nGregory P. Smith\nGustavo Camargo\nhauntsaninja\nHadi Alqattan\nHassan Abouelela\nHeaford\nHugo Barrera\nHugo van Kemenade\nHynek Schlawack\nIonite\nIvan Katanić\nJakub Kadlubiec\nJakub Warczarek\nJan Hnátek\nJason Fried\nJason Friedland\njgirardet\nJim Brännlund\nJimmy Jia\nJoe Antonakakis\nJon Dufresne\nJonas Obrist\nJonty Wareing\nJose Nazario\nJoseph Larson\nJosh Bode\nJosh Holland\nJoshua Cannon\nJosé Padilla\nJuan Luis Cano Rodríguez\nkaiix\nKatie McLaughlin\nKatrin Leinweber\nKeith Smiley\nKenyon Ralph\nKevin Kirsche\nKyle Hausmann\nKyle Sunden\nLawrence Chan\nLinus Groh\nLoren Carvalho\nLuka Sterbic\nLukasDrude\nMahmoud Hossam\nMariatta\nMatt VanEseltine\nMatthew Clapp\nMatthew Walster\nMax Smolens\nMichael Aquilina\nMichael Flaxman\nMichael J. Sullivan\nMichael McClimon\nMiguel Gaiowski\nMike\nmikehoyio\nMin ho Kim\nMiroslav Shubernetskiy\nMomIsBestFriend\nNathan Goldbaum\nNathan Hunt\nNeraste\nNikolaus Waxweiler\nOfek Lev\nOsaetin Daniel\notstrel\nPablo Galindo\nPaul Ganssle\nPaul Meinhardt\nPeter Bengtsson\nPeter Grayson\nPeter Stensmyr\npmacosta\nQuentin Pradet\nRalf Schmitt\nRamón Valles\nRichard Fearn\nRishikesh Jha\nRupert Bedford\nRussell Davis\nSagi Shadur\nRémi Verschelde\nSami Salonen\nSamuel Cormier-Iijima\nSanket Dasgupta\nSergi\nScott Stevenson\nShantanu\nshaoran\nShinya Fujino\nspringstan\nStavros Korokithakis\nStephen Rosen\nSteven M. Vascellaro\nSunil Kapil\nSébastien Eustace\nTal Amuyal\nTerrance\nThom Lu\nThomas Grainger\nTim Gates\nTim Swast\nTimo\nToby Fleming\nTom Christie\nTony Narlock\nTsuyoshi Hombashi\nTushar Chandra\nTzu-ping Chung\nUtsav Shah\nutsav-dbx\nvezeli\nVille Skyttä\nVishwas B Sharma\nVlad Emelianov\nwilliamfzc\nwouter bolsterlee\nYazdan\nYngve Høiseth\nYurii Karabas\nZac Hatfield-Dodds"
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_client-7.3.5.dist-info/licenses/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_client-7.3.5.dist-info/licenses/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_server-1.18.1.dist-info/COPYING.html",
    "href": "ml_project_template_venv/lib/python3.10/site-packages/jupyter_server-1.18.1.dist-info/COPYING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "This project is licensed under the terms of the Modified BSD License (also known as New or Revised or 3-Clause BSD), as follows:\n\nCopyright (c) 2001-2015, IPython Development Team\nCopyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the Jupyter Development Team nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project. This includes all of the Jupyter subprojects.\nThe core team that coordinates development on GitHub can be found here: https://github.com/jupyter/.\n\n\n\nJupyter uses a shared copyright model. Each contributor maintains copyright over their contributions to Jupyter. But, it is important to note that these contributions are typically only changes to the repositories. Thus, the Jupyter source code, in its entirety is not the copyright of any single person or institution. Instead, it is the collective copyright of the entire Jupyter Development Team. If individual contributors want to maintain a record of what changes/contributions they have specific copyright on, they should indicate their copyright in the commit message of the change, when they commit the change to one of the Jupyter repositories.\nWith this in mind, the following banner should be used in any source code file to indicate the copyright and license terms:\n# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License."
  },
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "API",
    "section": "",
    "text": "input: optional\noutput: API for utilizing trained ML model\ndescription:\nDefine your API in a notebook to get it included in the documentation without copy-pasting stuff around.\nRemember that you can utilize the #export tag to export cell commands to [your_module]/api.py."
  },
  {
    "objectID": "api.html#import-relevant-modules",
    "href": "api.html#import-relevant-modules",
    "title": "API",
    "section": "Import relevant modules",
    "text": "Import relevant modules"
  },
  {
    "objectID": "api.html#define-api",
    "href": "api.html#define-api",
    "title": "API",
    "section": "Define API",
    "text": "Define API\nBy running nbdev_build_lib your API script is exported to [your_module]/api.py - you can run the API with python [your_module]/api.py."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data",
    "section": "",
    "text": "input: raw data\noutput: clean and tidy dataset + toy dataset for testing\ndescription:\nThis is the first notebook of your machine learning project. In this notebook, you will load the data, inspect, clean and make it tidy. You will define the data points and their features and labels. The output of this notebook is a clean, tidy dataset ready for analysis and machine learning. You can also do a basic statistical analysis of the data to better understand it. For any functions you define for handling the data, remember to mark their cells with # export -comment, so that they will be included in the data.py-module built based on this notebook. You can also include unit tests for your own functions.\nRewrite this and the other text cells with your own descriptions."
  },
  {
    "objectID": "data.html#import-relevant-modules",
    "href": "data.html#import-relevant-modules",
    "title": "Data",
    "section": "Import relevant modules",
    "text": "Import relevant modules"
  },
  {
    "objectID": "data.html#define-notebook-parameters",
    "href": "data.html#define-notebook-parameters",
    "title": "Data",
    "section": "Define notebook parameters",
    "text": "Define notebook parameters\nDefine input, output and additional parameters of this notebook, the information needed for running the notebook. In your own project, you can do this step in the later iterations of the work, when you know what is required. In this cell, only assing values to variables directly: variable_name = value. Do not derive any information in this cell as it will mess up the parameterization - do it in the cell below.\n\n# This cell is tagged with 'parameters'\nseed = 0\n# your code here\n\nDefine any immediate derivative operations from the parameters:\n\n# set seed\nnp.random.seed(seed)\n# your code here"
  },
  {
    "objectID": "data.html#load-the-data",
    "href": "data.html#load-the-data",
    "title": "Data",
    "section": "Load the data",
    "text": "Load the data\n\n# your code here"
  },
  {
    "objectID": "data.html#describe-the-data",
    "href": "data.html#describe-the-data",
    "title": "Data",
    "section": "Describe the data",
    "text": "Describe the data\nDefine data points, features and labels\n\n# your code here"
  },
  {
    "objectID": "data.html#clean-the-data-and-make-it-tidy",
    "href": "data.html#clean-the-data-and-make-it-tidy",
    "title": "Data",
    "section": "Clean the data and make it tidy",
    "text": "Clean the data and make it tidy\n\n# your code here"
  },
  {
    "objectID": "data.html#visualize-the-data",
    "href": "data.html#visualize-the-data",
    "title": "Data",
    "section": "Visualize the data",
    "text": "Visualize the data\n\n# your code here"
  },
  {
    "objectID": "data.html#intermediate-conclusions-based-on-data-visualization",
    "href": "data.html#intermediate-conclusions-based-on-data-visualization",
    "title": "Data",
    "section": "Intermediate conclusions based on data visualization",
    "text": "Intermediate conclusions based on data visualization\nwhat do you see?"
  },
  {
    "objectID": "data.html#suffle-dataset",
    "href": "data.html#suffle-dataset",
    "title": "Data",
    "section": "Suffle dataset",
    "text": "Suffle dataset\n(skip if time series)\n\n# your code here"
  },
  {
    "objectID": "data.html#save-clean-and-tidy-data-for-further-use",
    "href": "data.html#save-clean-and-tidy-data-for-further-use",
    "title": "Data",
    "section": "Save clean and tidy data for further use",
    "text": "Save clean and tidy data for further use\n\n# your code here"
  },
  {
    "objectID": "data.html#sample-a-small-toy-dataset-n-10-1000-for-developing-and-software-testing-the-ml-algorithm",
    "href": "data.html#sample-a-small-toy-dataset-n-10-1000-for-developing-and-software-testing-the-ml-algorithm",
    "title": "Data",
    "section": "Sample a small toy dataset (N = 10-1000) for developing and software testing the ML algorithm",
    "text": "Sample a small toy dataset (N = 10-1000) for developing and software testing the ML algorithm\n\n# your code here\n\nsave the toy dataset:\n\n# your code here"
  },
  {
    "objectID": "data.html#you-can-now-move-on-to-the-model-notebook",
    "href": "data.html#you-can-now-move-on-to-the-model-notebook",
    "title": "Data",
    "section": "You can now move on to the model notebook!",
    "text": "You can now move on to the model notebook!"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "input: toy dataset from data-notebook\noutput: python module containing ML model class\ndescription:\nIn this notebook you hypothesize, explain and explore machine learning models to solve your problem.\nRemember to add # export to top of all cells containing functions or classes that you have defined and want to use outside this notebook.\nEdit this and the other cells to describe your project."
  },
  {
    "objectID": "model.html#import-relevant-modules",
    "href": "model.html#import-relevant-modules",
    "title": "Model",
    "section": "Import relevant modules",
    "text": "Import relevant modules"
  },
  {
    "objectID": "model.html#define-notebook-parameters",
    "href": "model.html#define-notebook-parameters",
    "title": "Model",
    "section": "Define notebook parameters",
    "text": "Define notebook parameters\nRemember, only simple assignments here!\n\n# this cell is tagged with 'parameters'\nseed = 0\n\nMake immediate derivations from the parameters:\n\nnp.random.seed(seed)"
  },
  {
    "objectID": "model.html#import-toy-data-for-developing-and-sw-testing-your-model",
    "href": "model.html#import-toy-data-for-developing-and-sw-testing-your-model",
    "title": "Model",
    "section": "Import toy data for developing and sw testing your model",
    "text": "Import toy data for developing and sw testing your model\n\n# your code here\n\n\nNote, that depending on your choice of file format and your variables, you might have to redefine data types once you load data!"
  },
  {
    "objectID": "model.html#explain-the-math-behind",
    "href": "model.html#explain-the-math-behind",
    "title": "Model",
    "section": "Explain the math behind",
    "text": "Explain the math behind\nYou can use \\(\\LaTeX\\) notation for math!\nRemember to also explain your choice of loss function and other metrics!"
  },
  {
    "objectID": "model.html#explore-with-simple-scripts-before-constructing-the-model-class",
    "href": "model.html#explore-with-simple-scripts-before-constructing-the-model-class",
    "title": "Model",
    "section": "Explore with simple scripts before constructing the model class",
    "text": "Explore with simple scripts before constructing the model class\n(you can edit out this part before publishing your work)\n\n# your code here"
  },
  {
    "objectID": "model.html#define-you-ml-model-class",
    "href": "model.html#define-you-ml-model-class",
    "title": "Model",
    "section": "Define you ML model class",
    "text": "Define you ML model class\nRemember that you can utilize Python class inheritance for complex or alternative model implementations!"
  },
  {
    "objectID": "model.html#unit-test",
    "href": "model.html#unit-test",
    "title": "Model",
    "section": "Unit test",
    "text": "Unit test\nUnit test your class or classes\n\n# your code here\nassert True  #"
  },
  {
    "objectID": "model.html#visualize-model-behaviour-with-toy-data",
    "href": "model.html#visualize-model-behaviour-with-toy-data",
    "title": "Model",
    "section": "Visualize model behaviour with toy data",
    "text": "Visualize model behaviour with toy data\nRuntimes, loss values, metrics, etc.\n\n## your code here"
  },
  {
    "objectID": "model.html#output-of-this-notebook",
    "href": "model.html#output-of-this-notebook",
    "title": "Model",
    "section": "Output of this notebook",
    "text": "Output of this notebook\nThe result of this notebook is a ML model class ready for evaluation with the real data.\nYou should export classes and functions to model.py with # nbdev_build_lib (workflows will do this automatically)."
  },
  {
    "objectID": "model.html#you-can-move-on-to-loss-notebook",
    "href": "model.html#you-can-move-on-to-loss-notebook",
    "title": "Model",
    "section": "You can move on to loss notebook!",
    "text": "You can move on to loss notebook!"
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "Workflow",
    "section": "",
    "text": "input: data, model & loss notebooks and related modules\noutput: script for executing the ML model update workflow\ndescription:\nA ML model update workflow allows you to automatically reload your data, train, evaluate and deploy your model. Note that by following the notebook templates you have already done most of the work - the notebooks are the workflow!\nSo, in this notebook you define a script to automatically execute the other notebooks with the papermill tool. Note, that you can input parameters to the notebooks!\nYou can either define static workflow, where every step is always recreated every time, or a dynamic workflow, where only the parts of the workflow are recreated that are affected by the changes since last model update. For dynamic workflows we encourage utilizing the Snakemake tool.\nHere we present a super simple static workflow example that you can build upon in your project.\nEdit this and other text cells to describe your project.\nRemember that you can utilize the #export tag to export cell commands to [your_module]/workflow.py."
  },
  {
    "objectID": "workflow.html#import-relevant-modules",
    "href": "workflow.html#import-relevant-modules",
    "title": "Workflow",
    "section": "Import relevant modules",
    "text": "Import relevant modules"
  },
  {
    "objectID": "workflow.html#define-notebook-parameters",
    "href": "workflow.html#define-notebook-parameters",
    "title": "Workflow",
    "section": "Define notebook parameters",
    "text": "Define notebook parameters\n\n# this cell is tagged with 'parameters'\nseed = 0\n# your code here\n\nmake direct derivations from the paramerters:\n\n# your code here"
  },
  {
    "objectID": "workflow.html#define-workflow",
    "href": "workflow.html#define-workflow",
    "title": "Workflow",
    "section": "Define workflow",
    "text": "Define workflow\nHere we present a tiny example you can try running yourself and then extend to your needs.\nNote that if you run nbdev_build_lib, the script is exported to [your_module]/workflow.py.\nThen, you can run python [your_module]/workflow.py to run the workflow automatically!\nYou can also define your workflow in another language than Python and write it into a file from this notebook utilizing the %%writefile magic. This way your script is still included the documentation without copy-pasting. You can also add the script to .gitignore to avoid double tracking."
  },
  {
    "objectID": "workflow.html#you-can-now-move-on-to-api-notebook",
    "href": "workflow.html#you-can-now-move-on-to-api-notebook",
    "title": "Workflow",
    "section": "You can now move on to API notebook!",
    "text": "You can now move on to API notebook!"
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "ml_project_template",
    "section": "",
    "text": "Contributions are accepted as pull requests. Please observe our coding practices at https://github.com/City-of-Helsinki/bestpractice/ and machine-learning specific practices at https://city-of-helsinki.github.io/ml_project_template/. Please make your pull requests short, elegant and only handling one issue at a time!\nIf you make a pull request, you may also want to contact https://github.com/City-of-Helsinki/ml_project_template/discussions to tell about your contribution.\nOur contribution handling guidelines are at https://github.com/City-of-Helsinki/bestpractice/blob/master/accepting-contributions.md\n\n\nBefore anything else, please install the git hooks that run automatic scripts during each commit and merge to strip the notebooks of superfluous metadata (and avoid merge conflicts). After cloning the repository, run the following command inside it:\nnbdev_install_git_hooks\n\n\n\n\nEnsure the bug was not already reported by searching on GitHub under Issues.\nIf you’re unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\nBe sure to add the complete error messages.\n\n\n\n\nOpen a new GitHub pull request with the patch.\nEnsure that your PR includes a test that fails without your patch, and pass with it.\nEnsure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n\n\n\n\n\nKeep each PR focused. While it’s more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\nDo not mix style changes/fixes with “functional” changes. It’s very difficult to review such PRs and it most likely get rejected.\nDo not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\nDo not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\nIf, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won’t need to review the whole PR again. In the exception case where you realize it’ll take many many commits to complete the requests, then it’s probably best to close the PR, do the work and then submit it again. Use common sense where you’d choose one way over another.\n\n\n\n\n\nDocs are automatically created from the notebooks in the root folder."
  },
  {
    "objectID": "loss.html",
    "href": "loss.html",
    "title": "Loss",
    "section": "",
    "text": "input: clean and tidy dataset from data notebook + ML model class from model notebook\noutput: evaluated, trained and (optionally) deployed model\ndescription:\nIn this notebook you train and evaluate ML methods implemented with the whole dataset. You can also save the model for later use, or deploy it to production environment, or use this notebook as the final output.\nEdit this and the other text cells to describe your project."
  },
  {
    "objectID": "loss.html#import-relevant-modules",
    "href": "loss.html#import-relevant-modules",
    "title": "Loss",
    "section": "Import relevant modules",
    "text": "Import relevant modules"
  },
  {
    "objectID": "loss.html#define-notebook-parameters",
    "href": "loss.html#define-notebook-parameters",
    "title": "Loss",
    "section": "Define notebook parameters",
    "text": "Define notebook parameters\n\n# This cell is tagged with 'parameters'\nseed = 0\n\nmake direct derivations from the parameters:\n\nnp.random.seed(seed)\n# your code here"
  },
  {
    "objectID": "loss.html#load-clean-and-tidy-dataset",
    "href": "loss.html#load-clean-and-tidy-dataset",
    "title": "Loss",
    "section": "Load clean and tidy dataset",
    "text": "Load clean and tidy dataset\n\n# your code here\n\nNote that depending on the file format and your variables, you might have to redefine datatypes in your dataframe!"
  },
  {
    "objectID": "loss.html#split-the-data-into-training-testing-and-validation-data",
    "href": "loss.html#split-the-data-into-training-testing-and-validation-data",
    "title": "Loss",
    "section": "Split the data into training, testing and validation data",
    "text": "Split the data into training, testing and validation data\n\n# your code here"
  },
  {
    "objectID": "loss.html#train-and-evaluate-the-models",
    "href": "loss.html#train-and-evaluate-the-models",
    "title": "Loss",
    "section": "Train and evaluate the models",
    "text": "Train and evaluate the models\n\n# your code here"
  },
  {
    "objectID": "loss.html#visualize-the-results",
    "href": "loss.html#visualize-the-results",
    "title": "Loss",
    "section": "Visualize the results",
    "text": "Visualize the results\n\n# your code here\n\nYou can also include statistical tests!\n\n# your code here"
  },
  {
    "objectID": "loss.html#validate-model",
    "href": "loss.html#validate-model",
    "title": "Loss",
    "section": "Validate model",
    "text": "Validate model\n\n# your code here"
  },
  {
    "objectID": "loss.html#visualize-validation",
    "href": "loss.html#visualize-validation",
    "title": "Loss",
    "section": "Visualize validation",
    "text": "Visualize validation\n\n# your code here"
  },
  {
    "objectID": "loss.html#acceptance-testing-deployment",
    "href": "loss.html#acceptance-testing-deployment",
    "title": "Loss",
    "section": "Acceptance testing & deployment",
    "text": "Acceptance testing & deployment\nIs the model ‘good enough’ for production?\nDefine criterion and tests for ‘good enough’ and automatic model save / deployment process.\n\n# your code here\n\n# EXAMPLE: model.deploy() if val_loss > 0.85 else raise ModelValidationError"
  },
  {
    "objectID": "loss.html#conclusions",
    "href": "loss.html#conclusions",
    "title": "Loss",
    "section": "Conclusions",
    "text": "Conclusions\nHow do the results look like?"
  },
  {
    "objectID": "loss.html#output-of-this-notebook",
    "href": "loss.html#output-of-this-notebook",
    "title": "Loss",
    "section": "Output of this notebook",
    "text": "Output of this notebook\nSaved or deployed trained model"
  },
  {
    "objectID": "loss.html#you-can-now-move-on-to-the-workflow-notebook",
    "href": "loss.html#you-can-now-move-on-to-the-workflow-notebook",
    "title": "Loss",
    "section": "You can now move on to the workflow notebook!",
    "text": "You can now move on to the workflow notebook!"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Helsinki Machine Learning Project Template",
    "section": "About",
    "text": "About\nThis is a git repository template for Python-based open source ML and analytics projects.\nThe template assumes the concept of Notebook Development. This means, that you do all the data science work inside notebooks. There is no copy-pasting! We use the nbdev tool to build python modules and doc pages from the notebooks, automatically. This way you always have your code, results and documentation as one. Notebooks can be executed with the papermill tool for an automatic, well documented model update workflow. Handy, isn’t it?\nThe template assumes that you divide your machine learning project into 5 parts:\n\nData - loading & preprocessing\nModel - Python class code & algorithm development\nLoss - model training & evaluation\nWorkflow - automatic model update (reproduce steps 0.-2.)\nAPI - an interface to interact with a trained model\n\nEach part has their own notebook template, that you can follow to plan and do your development.\nIn addition, the template comes with a working Dockerfile and .devcontainer for doing your development easily with any device. You can extend these for your needs and for building a runtime container for your machine learning app.\nThe template is completely open source and environment agnostic. Follow the installation instructions to create a new, independent repository with clean commit history, but with a copy of all the files and folders presented. The authors of this template will not be contributors to your project, although we are more hear what you have achieved with it! Also, if you don’t like something or know an improvement, your contribution is very welcome!\nNote, that updates to the template can not be automatically pulled to child projects.\nThe template is developed and maintained by the data and analytics team of the city of Helsinki. The template is published under the Apache-2.0 licence and open source utilization is encouraged!"
  },
  {
    "objectID": "index.html#contents",
    "href": "index.html#contents",
    "title": "Helsinki Machine Learning Project Template",
    "section": "Contents",
    "text": "Contents\nThe core structure of the repository is the following:\n## EDITABLE:\ndata/               # Folder for storing data files. Ignored by git by default.\n|- raw_data/        # To store raw data files\n|- preprocessed_data/   # To store cleaned data\nresults/            # Save results here. Ignored by git by default.\n|- notebooks/       # Save automatically executed notebooks here\n00_data.ipynb       # Extract, transfer, load data here & define related functions.\n01_model.ipynb      # Create and code test your ML model\n02_loss.ipynb       # Train and evaluate ML model, deploy or save for later use\n03_workflow.ipynb   # Define ML workflow and parameterization\n04_api.ipynb        # Define runtime API for using trained ML model\nproject-requirements.in    # Add here the Python packages you want to install\nupdate_install_dev_reqs.sh  # run this script to install new python packages\nsettings.ini        # Project specific settings. Build instructions for lib and docs.\nDockerfile          # Define docker image build instructions\n.devcontainer       # Codespaces / VSC dev environment instructions\n\n## AUTOMATICALLY GENERATED: (Do not edit unless otherwise specified!)\ndocs/               # Project documentation (html)\n[your_module]/      # Python module built from the notebooks (follow the installation instructions).\nREADME.md           # The frontpage of your project, generated from index.ipynb\nrequirements.txt    # dev / default requirements. automatically generated by pip-tools\nmin-requirements.txt # lighter requirements without dev tools. automatically generated by pip-tools\n\n## STATIC NON-EDITABLE: (Edit only if you know what you're doing!)\nbase-requirements.in    # core tools that every project built based on the template always requires\nrequirements.in    # development tools + project spesific requirements\nLISENCE                 # lisence information\nMANIFEST.in             # metadata for building python distributable\nsetup.py                # settings for the python module of your project\nCODE_OF_CONDUCT.md      # code of conduct. Please review before contributing."
  },
  {
    "objectID": "index.html#how-to-install",
    "href": "index.html#how-to-install",
    "title": "Helsinki Machine Learning Project Template",
    "section": "How to install",
    "text": "How to install\n\n\n\n\n\n\nNote\n\n\n\nif you are doing a project on personal data for the City of Helsinki, contact the data and analytics team of the city before proceeding any further!\n\n\n\n1. On your GitHub homepage\n\n(Create GitHub account if you do not have one already.\nSign into your GitHub homepage\nGo to github.com/City-of-Helsinki/ml_project_template and click the green button that says ‘Use this template’.\nGive your project a name. Do not use the dash symbol ‘-’, but rather the underscore ’_’, because the name of the repo will become the name of your Python module.\nIf you are creating a project for your organization, change the owner of the repo. From the drop down bar, select your organization GitHub account (e.g. City-of-Helsinki). You need to be included as a team member to the GitHub of the organization.\nDefine your project publicity (you can change this later, but most likely you want to begin with a private repo).\nClick ‘Create repository from template’\n\nThis will create a new repository for you copying everything from this template, but with clean commit history.\n\n\n2. Setting up your development environment\n\na) Recommended: Codespaces\nIf your organization has Codespaces enabled (requires GitHub Enterprise & Azure subscription), you are now ready to begin development. Just launch the repository in a codespace, and a dev container is automatically set up!\n\n\nb) Can’t use Codespaces: Local installation with Docker\nYou can build a development environment locally with docker. The recommended way is to use VSC in container development mode (link to instructions).\n\n\nc) Can’t use Docker: Local manual installation\nYou can also do your development ‘the good old way’:\n\nCreate an SSH key and add it to your github profile (instructions)\nConfigure your git user name and email adress if you haven’t done it already: git config --global user.name \"Firstname Lastname\" && git config --global user.email \"your@email.com\"\nClone your new repository: git clone git@github.com:[repository_owner]/[your_repository]\nGo inside the repository folder: cd [your_repository]\nCreate and activate virtual environment of your choice. Remember to define the Python version to 3.8! (Instructions: conda, venv)\nInstall pip-tools: python -m pip install pip-tools\nInstall requirements: pip-sync requirements.txt\nCreate an ipython kernel for running the notebooks: python -m ipykernel install --user --name python38myenv\nThe default development enviroment contains basic Jupyter, and many IDEs have built-in support notebooks. If you wish, you can install JupyterLab by uncommenting it in requirements.in and re-running pip-sync. To launch JupyterLab, run jupyter-lab --allow-root --config .devcontainer/jupyter-server-config.py\n\n\n\nd) Can’t connect to internet: Offline install with Docker\nSometimes you have to work in an environment that can not be connected to the internet, for example for privacy or cybersecurity reasons. In this case, first install the template and all packages that you assume you will require to an environment with internet, and build the docker image as in 2c). Then, save the docker image and transfer it to your offline environment following these instructions.\n\n\n\n3. Initializing your project\nFew last tweaks before you are good to go:\n\nEdit LICENCE, Makefile, settings.ini, docs/_config.yml and docs/_data/topnav.yml according to your project details. Don’t worry - you can continue editing them in the future.\nRemove the folder ml_project_template with the command git rm -r ml_project_template. A new folder with the name of your repository will be created automatically when calling nbdev_build_lib.\nRecreate the python module: nbdev_build_lib. In the future, repeat this step every time you move between notebooks to ensure your python modules are up to date.\nRecreate the html doc pages & README: nbdev_build_docs. In the future, repeat this step every time you push code to ensure your documentation is up to date.\nMake initial commit: git add . && git commit -m \"initialized repository from City-of-Helsinki/ml_project_template\"\nPush changes git push -u origin master\n\nYou are now ready to begin your ML project development. Remember to track your changes with git!"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Helsinki Machine Learning Project Template",
    "section": "How to use",
    "text": "How to use\n\nInstall this template as basis of your new project (see above).\nIf you are not working inside a container, remember to activate your virtual environment every time you begin work: conda activate [environment name] with anaconda or source [environment name]/bin/activate with virtualenv.\nDevelop your ML solution! (Follow the notebooks!)\nSave your notebooks and call nbdev_build_lib to build python modules of your notebooks - needed if you want to share code between notebooks or create a modules. This will export all notebook cells with # export tag to corresponding .py files under the module (the folder inside your repository named after your repository). Do this every time you make changes to any exportable parts of the code.\nSave your notebooks and call nbdev_build_docs to create doc pages based on your notebooks (see below). This will convert the notebooks into HTML files under docs/ and update README based on the index.ipynb. If you want to host your project pages on GitHub (like the doc pages of this template), you will have to make your project public and enable github pages in repo > Settings > Pages : set Source to docs/. Alternatively you can build the pages locally with jekyll."
  },
  {
    "objectID": "index.html#installing-updating-project-libraries",
    "href": "index.html#installing-updating-project-libraries",
    "title": "Helsinki Machine Learning Project Template",
    "section": "Installing & updating project libraries",
    "text": "Installing & updating project libraries\nPython has a rich and wide ecosystem of libraries to help with machine learning tasks among other things. Pandas, Matplotlib, Scipy, PyTorch to name a few. If base libraries in this template aren’t sufficient you can add more with pip install library. However, pip command installs libraries into your local Python environment. To achieve consistent reproducibility we need to gather information about requirements into project repository. New libraries are added to project-requirements.in file. When you change this file remember to run:\npip-compile --generate-hashes --allow-unsafe -o requirements.txt base-requirements.in requirements.in project-requirements.in\npip-compile --generate-hashes --allow-unsafe -o min-requirements.txt base-requirements.in project-requirements.in\nThese update full requirements for development environments and lighter, more focused requirements for server usage.\nAfter requirements are updated you should run:\npip-sync requirements.txt\nThis way libraries you and other users will have the same Python environment.\nNOTE: run `./update_install_dev_reqs.sh` for short - it contains the three above pip commands for updating and installing the requirements!\n\nWARNING: if you don't update package names and versions next time you or anybody else tries to use this project in another environment its code might not work. Worse, it might *seem to* work, but does so incorrectly."
  },
  {
    "objectID": "index.html#ethical-aspects",
    "href": "index.html#ethical-aspects",
    "title": "Helsinki Machine Learning Project Template",
    "section": "Ethical aspects",
    "text": "Ethical aspects\nPlease involve ethical consideration in the documentation ML application.\nFor example: * Can you recognize ethical issues with your ML project? * Is there a risk for bias, discrimination, violation of privacy or conflict with the local or global laws? * Could your results or algorithms be misused for malicious acts? * Can data or model updates include bias in your model? * How have you tackled these issues in your implementation? * You most certainly make ethical choises in your code. Do you document & highlight them? * If you build an actual application, how can contribute if they notice an unresolved ethical issue?"
  },
  {
    "objectID": "index.html#how-to-cite-optional",
    "href": "index.html#how-to-cite-optional",
    "title": "Helsinki Machine Learning Project Template",
    "section": "How to cite (optional)",
    "text": "How to cite (optional)\nIf you are doing a research project, you can add bibtex and other citation templates here. You can also get a doi for your code by adding it to a code archive, so your code can be cited directly! Most archives also provide repository badges.\nTo cite this work, use:\n@misc{sten2022helsinki,\ntitle = {Helsinki Machine Learning Project Template},\nauthor = {Nuutti A Sten and Jussi Arpalahti},\nyear = {2022},\nhowpublished = {City of Helsinki. Available at: \\url{https://github.com/City-of-Helsinki/ml_project_template}}\n}"
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "Helsinki Machine Learning Project Template",
    "section": "Contributing",
    "text": "Contributing\nSee CONTRIBUTING.md on how to contribute to the development of this template."
  },
  {
    "objectID": "index.html#copyright",
    "href": "index.html#copyright",
    "title": "Helsinki Machine Learning Project Template",
    "section": "Copyright",
    "text": "Copyright\nCopyright 2022 City-of-Helsinki. Licensed under the Apache License, Version 2.0 (the “License”); you may not use this project’s files except in compliance with the License. A copy of the License is provided in the LICENSE file in this repository.\nThe Helsinki logo is a registered trademark, and may only be used by the city of Helsinki.\nNOTE: If you are using this template for other than city of Helsinki projects, remove the files `favicon.ico` and `company_logo.png` from `docs/assets/images/`.\n\n\n# to remove remove helsinki logo and favicon, run:\ngit rm docs/assets/images/favicon.ico docs/assets/images/company_logo.png\ngit commit -m \"removed Helsinki logo and favicon\"\nThis template was built using nbdev on top of the fast.ai nbdev_template."
  }
]